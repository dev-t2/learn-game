{"version":3,"sources":["api/keyboard.ts","components/Character.tsx","components/Preload.tsx","components/Reset.tsx","components/Screen.tsx","components/Weapon.tsx","App.tsx","index.tsx"],"names":["initialKeyboard","Space","ArrowLeft","ArrowRight","Container","styled","div","width","height","position","bottom","left","zIndex","spriteAnimation","keyframes","SpriteImage","motion","isFlip","backgroundImage","process","transform","undefined","animation","Character","keyboard","onAttack","useState","setIsFlip","setMotion","setLeft","ref","useRef","useEffect","interval","setInterval","prev","clearInterval","current","offsetWidth","offsetHeight","memo","PreloadImage","img","display","path","images","Preload","map","image","index","src","Reset","styles","css","emotionReset","Screen","children","Weapon","App","setKeyboard","weapons","setWeapons","onKeyboard","useCallback","callback","window","addEventListener","code","Object","keys","includes","weapon","key","nanoid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26d65830.chunk.js","sourcesContent":["export type Keyboard = {\r\n  Space: boolean;\r\n  ArrowLeft: boolean;\r\n  ArrowRight: boolean;\r\n};\r\n\r\nexport const initialKeyboard: Keyboard = {\r\n  Space: false,\r\n  ArrowLeft: false,\r\n  ArrowRight: false,\r\n};\r\n\r\nexport type KeyboardEvent = { [key: string]: boolean };\r\n\r\ntype Callback = (keyboardEvent: KeyboardEvent) => void;\r\n\r\nexport const keyboardEventListener = (callback: Callback) => {\r\n  window.addEventListener('keydown', ({ code }) => {\r\n    if (Object.keys(initialKeyboard).includes(code)) {\r\n      callback({ [code]: true });\r\n    }\r\n  });\r\n\r\n  window.addEventListener('keyup', ({ code }) => {\r\n    if (Object.keys(initialKeyboard).includes(code)) {\r\n      callback({ [code]: false });\r\n    }\r\n  });\r\n};\r\n","import { FC, memo, useEffect, useRef, useState } from 'react';\r\nimport { clearInterval, setInterval } from 'timers';\r\nimport { keyframes } from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport { Keyboard } from '../api/keyboard';\r\nimport { IWeapon } from './Weapon';\r\n\r\ninterface IContainer {\r\n  left: number;\r\n}\r\n\r\nconst Container = styled.div<IContainer>(({ left }) => ({\r\n  width: 377,\r\n  height: 458,\r\n  position: 'fixed',\r\n  bottom: 0,\r\n  left,\r\n  zIndex: 2,\r\n}));\r\n\r\nconst spriteAnimation = keyframes`\r\n  from { background-position-x: 0 }\r\n  to { background-position-x: -3770px }\r\n`;\r\n\r\ntype Motion = 'idle' | 'run' | 'attack';\r\n\r\ninterface ISpriteImage {\r\n  motion: Motion;\r\n  isFlip: boolean;\r\n}\r\n\r\nconst SpriteImage = styled.div<ISpriteImage>(({ motion, isFlip }) => ({\r\n  height: '100%',\r\n  backgroundImage: `url(${process.env.PUBLIC_URL}/image/character/${motion}.png)`,\r\n  transform: isFlip ? 'rotateY(180deg)' : undefined,\r\n  animation: `${spriteAnimation} 0.5s infinite steps(10)`,\r\n}));\r\n\r\nconst speed = 10;\r\n\r\ninterface ICharacter {\r\n  keyboard: Keyboard;\r\n  onAttack: (weapon: IWeapon) => void;\r\n}\r\n\r\nconst Character: FC<ICharacter> = ({ keyboard, onAttack }) => {\r\n  const [isFlip, setIsFlip] = useState(false);\r\n  const [motion, setMotion] = useState<Motion>('idle');\r\n  const [left, setLeft] = useState(0);\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (keyboard.Space) {\r\n        setMotion('attack');\r\n      } else if (\r\n        keyboard.ArrowLeft !== keyboard.ArrowRight &&\r\n        keyboard.ArrowLeft\r\n      ) {\r\n        setIsFlip(true);\r\n        setMotion('run');\r\n        setLeft((prev) => prev - speed);\r\n      } else if (\r\n        keyboard.ArrowLeft !== keyboard.ArrowRight &&\r\n        keyboard.ArrowRight\r\n      ) {\r\n        setIsFlip(false);\r\n        setMotion('run');\r\n        setLeft((prev) => prev + speed);\r\n      } else {\r\n        setMotion('idle');\r\n      }\r\n    }, 10);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [keyboard]);\r\n\r\n  useEffect(() => {\r\n    if (motion === 'attack' && ref.current) {\r\n      onAttack({\r\n        left: left + ref.current.offsetWidth / 2,\r\n        bottom: ref.current.offsetHeight / 2,\r\n      });\r\n    }\r\n  }, [motion, onAttack, left]);\r\n\r\n  return (\r\n    <Container left={left}>\r\n      <SpriteImage ref={ref} motion={motion} isFlip={isFlip} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default memo(Character);\r\n","import { memo } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst PreloadImage = styled.img({\r\n  display: 'none',\r\n});\r\n\r\nconst path = `${process.env.PUBLIC_URL}/image`;\r\n\r\nconst images = [\r\n  `${path}/character/attack.png`,\r\n  `${path}/character/idle.png`,\r\n  `${path}/character/run.png`,\r\n  `${path}/weapon/weapon.png`,\r\n];\r\n\r\nconst Preload = () => {\r\n  return (\r\n    <div>\r\n      {images.map((image, index) => (\r\n        <PreloadImage key={index} src={image} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Preload);\r\n","import { memo } from 'react';\r\nimport { Global, css } from '@emotion/react';\r\nimport emotionReset from 'emotion-reset';\r\n\r\nconst Reset = () => {\r\n  return (\r\n    <Global\r\n      styles={css`\r\n        ${emotionReset}\r\n\r\n        *, *::after, *::before {\r\n          box-sizing: border-box;\r\n          -moz-osx-font-smoothing: grayscale;\r\n          -webkit-font-smoothing: antialiased;\r\n          font-smoothing: antialiased;\r\n        }\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(Reset);\r\n","import { FC, memo, ReactNode } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Container = styled.div({\r\n  position: 'relative',\r\n  height: '100vh',\r\n});\r\n\r\ninterface IScreen {\r\n  children: ReactNode;\r\n}\r\n\r\nconst Screen: FC<IScreen> = ({ children }) => {\r\n  return <Container>{children}</Container>;\r\n};\r\n\r\nexport default memo(Screen);\r\n","import { FC, memo } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\ninterface IContainer {\r\n  left: number;\r\n  bottom: number;\r\n}\r\n\r\nconst Container = styled.div<IContainer>(({ left, bottom }) => ({\r\n  width: 160,\r\n  height: 32,\r\n  backgroundImage: `url(${process.env.PUBLIC_URL}/image/weapon/weapon.png)`,\r\n  position: 'absolute',\r\n  left,\r\n  bottom,\r\n  zIndex: 1,\r\n}));\r\n\r\nexport interface IWeapon {\r\n  left: number;\r\n  bottom: number;\r\n}\r\n\r\nconst Weapon: FC<IWeapon> = ({ left, bottom }) => {\r\n  return <Container left={left} bottom={bottom} />;\r\n};\r\n\r\nexport default memo(Weapon);\r\n","import { memo, useCallback, useEffect, useState } from 'react';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport {\r\n  initialKeyboard,\r\n  KeyboardEvent,\r\n  keyboardEventListener,\r\n} from './api/keyboard';\r\nimport { IWeapon } from './components/Weapon';\r\nimport { Character, Preload, Reset, Screen, Weapon } from './components';\r\n\r\nconst App = () => {\r\n  const [keyboard, setKeyboard] = useState(initialKeyboard);\r\n  const [weapons, setWeapons] = useState<IWeapon[]>([]);\r\n\r\n  const onKeyboard = useCallback((keyboard: KeyboardEvent) => {\r\n    setKeyboard((prev) => ({ ...prev, ...keyboard }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    keyboardEventListener(onKeyboard);\r\n  }, [onKeyboard]);\r\n\r\n  const onAttack = useCallback((weapon: IWeapon) => {\r\n    setWeapons((prev) => [...prev, weapon]);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Reset />\r\n\r\n      <Preload />\r\n\r\n      <Screen>\r\n        <Character keyboard={keyboard} onAttack={onAttack} />\r\n\r\n        {weapons.map((weapon) => {\r\n          const key = nanoid();\r\n\r\n          return <Weapon key={key} left={weapon.left} bottom={weapon.bottom} />;\r\n        })}\r\n      </Screen>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}