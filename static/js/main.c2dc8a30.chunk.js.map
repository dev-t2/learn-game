{"version":3,"sources":["api/keyboard.ts","components/Reset.tsx","App.tsx","index.tsx"],"names":["initialKeyboard","ArrowLeft","ArrowRight","Reset","styles","css","emotionReset","memo","Container","styled","div","height","backgroundColor","CharacterContainer","Character","App","useState","keys","setKeys","onKeyboard","useCallback","keyboardEvent","prev","useEffect","callback","window","addEventListener","key","Object","includes","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAIaA,EAAkB,CAAEC,WAAW,EAAOC,YAAY,G,uCCAzDC,EAAQ,WACZ,OACE,cAAC,SAAD,CACEC,OAAQC,cAAF,uQACFC,QAaKC,iBAAKJ,GCfdK,EAAYC,IAAOC,IAAI,CAC3BC,OAAQ,QACRC,gBAAiB,YAGbC,EAAqBJ,IAAOC,IAAI,IAEhCI,EAAYL,IAAOC,IAAI,IAEvBK,EAAM,WACV,MAAwBC,mBAAShB,GAAjC,mBAAOiB,EAAP,KAAaC,EAAb,KAEMC,EAAaC,uBAAY,SAACC,GAC9BH,GAAQ,SAACI,GAAD,mBAAC,eAAeA,GAASD,QAChC,IAQH,OANAE,qBAAU,WFhBY,IAACC,IEiBZL,EFhBXM,OAAOC,iBAAiB,WAAW,YAAc,IAAXC,EAAU,EAAVA,IAChCC,OAAOX,KAAKjB,GAAiB6B,SAASF,IACxCH,EAAS,eAAGG,GAAM,OAItBF,OAAOC,iBAAiB,SAAS,YAAc,IAAXC,EAAU,EAAVA,IAC9BC,OAAOX,KAAKjB,GAAiB6B,SAASF,IACxCH,EAAS,eAAGG,GAAM,SESnB,CAACR,IAEJW,QAAQC,IAAId,GAGV,qCACE,cAAC,EAAD,IAEA,cAACT,EAAD,UACE,cAACK,EAAD,UACE,cAACC,EAAD,YAOKP,iBAAKQ,GCpCpBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c2dc8a30.chunk.js","sourcesContent":["export type KeyboardEvent = { [key: string]: boolean };\r\n\r\ntype Callback = (keyboardEvent: KeyboardEvent) => void;\r\n\r\nexport const initialKeyboard = { ArrowLeft: false, ArrowRight: false };\r\n\r\nexport const keyboard = (callback: Callback) => {\r\n  window.addEventListener('keydown', ({ key }) => {\r\n    if (Object.keys(initialKeyboard).includes(key)) {\r\n      callback({ [key]: true });\r\n    }\r\n  });\r\n\r\n  window.addEventListener('keyup', ({ key }) => {\r\n    if (Object.keys(initialKeyboard).includes(key)) {\r\n      callback({ [key]: false });\r\n    }\r\n  });\r\n};\r\n","import { memo } from 'react';\r\nimport { Global, css } from '@emotion/react';\r\nimport emotionReset from 'emotion-reset';\r\n\r\nconst Reset = () => {\r\n  return (\r\n    <Global\r\n      styles={css`\r\n        ${emotionReset}\r\n\r\n        *, *::after, *::before {\r\n          box-sizing: border-box;\r\n          -moz-osx-font-smoothing: grayscale;\r\n          -webkit-font-smoothing: antialiased;\r\n          font-smoothing: antialiased;\r\n        }\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(Reset);\r\n","import styled from '@emotion/styled';\r\nimport { memo, useCallback, useEffect, useState } from 'react';\r\n\r\nimport { initialKeyboard, keyboard, KeyboardEvent } from './api/keyboard';\r\nimport { Reset } from './components';\r\n\r\nconst Container = styled.div({\r\n  height: '100vh',\r\n  backgroundColor: '#000000',\r\n});\r\n\r\nconst CharacterContainer = styled.div({});\r\n\r\nconst Character = styled.div({});\r\n\r\nconst App = () => {\r\n  const [keys, setKeys] = useState(initialKeyboard);\r\n\r\n  const onKeyboard = useCallback((keyboardEvent: KeyboardEvent) => {\r\n    setKeys((prev) => ({ ...prev, ...keyboardEvent }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    keyboard(onKeyboard);\r\n  }, [onKeyboard]);\r\n\r\n  console.log(keys);\r\n\r\n  return (\r\n    <>\r\n      <Reset />\r\n\r\n      <Container>\r\n        <CharacterContainer>\r\n          <Character></Character>\r\n        </CharacterContainer>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}