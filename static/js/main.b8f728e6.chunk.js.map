{"version":3,"sources":["api/keyboard.ts","api/animation.ts","components/Character.tsx","components/Reset.tsx","components/Screen.tsx","App.tsx","index.tsx"],"names":["initialKeyboard","Space","ArrowLeft","ArrowRight","spriteAnimation","keyframes","Container","styled","div","width","height","position","bottom","left","SpriteImage","motion","isFlip","backgroundImage","process","transform","undefined","animation","Character","keyboard","useState","setMotion","setIsFlip","setPosition","useEffect","interval","setInterval","prev","clearInterval","memo","Reset","styles","css","emotionReset","Screen","children","App","setKeyboard","onKeyboard","useCallback","callback","window","addEventListener","code","Object","keys","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAMaA,EAA4B,CACvCC,OAAO,EACPC,WAAW,EACXC,YAAY,G,uBCPDC,EAAkBC,oBAAH,0G,eCWtBC,EAAYC,IAAOC,KAAgB,kBAAmB,CAC1DC,MAAO,IACPC,OAAQ,IACRC,SAAU,QACVC,OAAQ,EACRC,KALuC,EAAGF,aAetCG,EAAcP,IAAOC,KAAkB,gBAAGO,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAX,MAAyB,CACpEN,OAAQ,OACRO,gBAAgB,OAAD,OAASC,cAAT,4BAAmDH,EAAnD,SACfI,UAAWH,EAAS,uBAAoBI,EACxCC,UAAU,GAAD,OAAKjB,EAAL,gCAOLkB,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnC,EAA4BC,mBAAiB,QAA7C,mBAAOT,EAAP,KAAeU,EAAf,KACA,EAA4BD,oBAAS,GAArC,mBAAOR,EAAP,KAAeU,EAAf,KACA,EAAgCF,mBAAS,GAAzC,mBAAOb,EAAP,KAAiBgB,EAAjB,KA4BA,OA1BAC,qBAAU,WACR,IAAMC,EAAWC,uBAAY,WACvBP,EAASrB,YAAcqB,EAASpB,YAC9BoB,EAASrB,YACXwB,GAAU,GACVC,GAAY,SAACI,GAAD,OAAUA,EA1ClB,OA6CFR,EAASpB,aACXuB,GAAU,GACVC,GAAY,SAACI,GAAD,OAAUA,EA/ClB,OAkDNN,EAAU,QACDF,EAAStB,MAClBwB,EAAU,UAEVA,EAAU,UAEX,IAEH,OAAO,WACLO,wBAAcH,MAEf,CAACN,IAGF,cAACjB,EAAD,CAAWK,SAAUA,EAArB,SACE,cAACG,EAAD,CAAaC,OAAQA,EAAQC,OAAQA,OAK5BiB,iBAAKX,G,iBCzEdY,EAAQ,WACZ,OACE,cAAC,SAAD,CACEC,OAAQC,cAAF,uQACFC,QAaKJ,iBAAKC,GClBd5B,EAAYC,IAAOC,IAAI,CAC3BE,OAAQ,UAOJ4B,EAAsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,OAAO,cAAC,EAAD,UAAYA,KAGNN,iBAAKK,GCNdE,EAAM,WACV,MAAgChB,mBAASxB,GAAzC,mBAAOuB,EAAP,KAAiBkB,EAAjB,KAEMC,EAAaC,uBAAY,SAACpB,GAC9BkB,GAAY,SAACV,GAAD,mBAAC,eAAeA,GAASR,QACpC,IAMH,OAJAK,qBAAU,WLAyB,IAACgB,IKCZF,ELAxBG,OAAOC,iBAAiB,WAAW,YAAe,IAAZC,EAAW,EAAXA,KAChCC,OAAOC,KAAKjD,GAAiBkD,SAASH,IACxCH,EAAS,eAAGG,GAAO,OAIvBF,OAAOC,iBAAiB,SAAS,YAAe,IAAZC,EAAW,EAAXA,KAC9BC,OAAOC,KAAKjD,GAAiBkD,SAASH,IACxCH,EAAS,eAAGG,GAAO,SKPpB,CAACL,IAGF,qCACE,cAAC,EAAD,IAEA,cAAC,EAAD,UACE,cAAC,EAAD,CAAWnB,SAAUA,UAMdU,iBAAKO,GC1BpBW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b8f728e6.chunk.js","sourcesContent":["export type Keyboard = {\r\n  Space: boolean;\r\n  ArrowLeft: boolean;\r\n  ArrowRight: boolean;\r\n};\r\n\r\nexport const initialKeyboard: Keyboard = {\r\n  Space: false,\r\n  ArrowLeft: false,\r\n  ArrowRight: false,\r\n};\r\n\r\nexport type KeyboardEvent = { [key: string]: boolean };\r\n\r\ntype Callback = (keyboardEvent: KeyboardEvent) => void;\r\n\r\nexport const keyboardEventListener = (callback: Callback) => {\r\n  window.addEventListener('keydown', ({ code }) => {\r\n    if (Object.keys(initialKeyboard).includes(code)) {\r\n      callback({ [code]: true });\r\n    }\r\n  });\r\n\r\n  window.addEventListener('keyup', ({ code }) => {\r\n    if (Object.keys(initialKeyboard).includes(code)) {\r\n      callback({ [code]: false });\r\n    }\r\n  });\r\n};\r\n","import { keyframes } from '@emotion/react';\r\n\r\nexport const spriteAnimation = keyframes`\r\n  from { background-position-x: 0 }\r\n  to { background-position-x: -3770px }\r\n`;\r\n","import { FC, memo, useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport { Keyboard } from '../api/keyboard';\r\nimport { spriteAnimation } from '../api/animation';\r\nimport { clearInterval, setInterval } from 'timers';\r\n\r\nconst SPEED = 10;\r\n\r\ninterface IContainer {\r\n  position: number;\r\n}\r\n\r\nconst Container = styled.div<IContainer>(({ position }) => ({\r\n  width: 377,\r\n  height: 458,\r\n  position: 'fixed',\r\n  bottom: 0,\r\n  left: position,\r\n}));\r\n\r\ntype Motion = 'idle' | 'run' | 'attack';\r\n\r\ninterface ISpriteImage {\r\n  motion: Motion;\r\n  isFlip: boolean;\r\n}\r\n\r\nconst SpriteImage = styled.div<ISpriteImage>(({ motion, isFlip }) => ({\r\n  height: '100%',\r\n  backgroundImage: `url(${process.env.PUBLIC_URL}/image/character/${motion}.png)`,\r\n  transform: isFlip ? 'rotateY(180deg)' : undefined,\r\n  animation: `${spriteAnimation} 0.5s infinite steps(10)`,\r\n}));\r\n\r\ninterface ICharacter {\r\n  keyboard: Keyboard;\r\n}\r\n\r\nconst Character: FC<ICharacter> = ({ keyboard }) => {\r\n  const [motion, setMotion] = useState<Motion>('idle');\r\n  const [isFlip, setIsFlip] = useState(false);\r\n  const [position, setPosition] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (keyboard.ArrowLeft !== keyboard.ArrowRight) {\r\n        if (keyboard.ArrowLeft) {\r\n          setIsFlip(true);\r\n          setPosition((prev) => prev - SPEED);\r\n        }\r\n\r\n        if (keyboard.ArrowRight) {\r\n          setIsFlip(false);\r\n          setPosition((prev) => prev + SPEED);\r\n        }\r\n\r\n        setMotion('run');\r\n      } else if (keyboard.Space) {\r\n        setMotion('attack');\r\n      } else {\r\n        setMotion('idle');\r\n      }\r\n    }, 20);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [keyboard]);\r\n\r\n  return (\r\n    <Container position={position}>\r\n      <SpriteImage motion={motion} isFlip={isFlip} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default memo(Character);\r\n","import { memo } from 'react';\r\nimport { Global, css } from '@emotion/react';\r\nimport emotionReset from 'emotion-reset';\r\n\r\nconst Reset = () => {\r\n  return (\r\n    <Global\r\n      styles={css`\r\n        ${emotionReset}\r\n\r\n        *, *::after, *::before {\r\n          box-sizing: border-box;\r\n          -moz-osx-font-smoothing: grayscale;\r\n          -webkit-font-smoothing: antialiased;\r\n          font-smoothing: antialiased;\r\n        }\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(Reset);\r\n","import { FC, memo, ReactNode } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Container = styled.div({\r\n  height: '100vh',\r\n});\r\n\r\ninterface IScreen {\r\n  children: ReactNode;\r\n}\r\n\r\nconst Screen: FC<IScreen> = ({ children }) => {\r\n  return <Container>{children}</Container>;\r\n};\r\n\r\nexport default memo(Screen);\r\n","import { memo, useCallback, useEffect, useState } from 'react';\r\n\r\nimport {\r\n  initialKeyboard,\r\n  KeyboardEvent,\r\n  keyboardEventListener,\r\n} from './api/keyboard';\r\nimport { Character, Reset, Screen } from './components';\r\n\r\nconst App = () => {\r\n  const [keyboard, setKeyboard] = useState(initialKeyboard);\r\n\r\n  const onKeyboard = useCallback((keyboard: KeyboardEvent) => {\r\n    setKeyboard((prev) => ({ ...prev, ...keyboard }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    keyboardEventListener(onKeyboard);\r\n  }, [onKeyboard]);\r\n\r\n  return (\r\n    <>\r\n      <Reset />\r\n\r\n      <Screen>\r\n        <Character keyboard={keyboard} />\r\n      </Screen>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}