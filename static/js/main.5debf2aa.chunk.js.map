{"version":3,"sources":["api/keyboard.ts","components/Character.tsx","components/Reset.tsx","App.tsx","index.tsx"],"names":["initialKeyboard","ArrowLeft","ArrowRight","Container","styled","div","width","height","Animation","keyframes","SpriteImage","motion","backgroundImage","process","animation","Character","memo","Reset","styles","css","emotionReset","App","useState","keys","setKeys","onKeyboard","useCallback","keyboardEvent","prev","useEffect","callback","window","addEventListener","key","Object","includes","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAIaA,EAAkB,CAAEC,WAAW,EAAOC,YAAY,G,sBCEzDC,EAAYC,IAAOC,IAAI,CAC3BC,MAAO,IACPC,OAAQ,MAGJC,EAAYC,oBAAH,0GASTC,EAAcN,IAAOC,KAAkB,gBAAGM,EAAH,EAAGA,OAAH,MAAiB,CAC5DJ,OAAQ,OACRK,gBAAgB,OAAD,OAlBEC,cAkBF,4BAAuCF,EAAvC,SACfG,UAAU,GAAD,OAAKN,EAAL,gCAOLO,EAA4B,SAAC,GAAgB,IAAdJ,EAAa,EAAbA,OACnC,OACE,cAACR,EAAD,UACE,cAACO,EAAD,CAAaC,OAAQA,OAKZK,iBAAKD,G,iBClCdE,EAAQ,WACZ,OACE,cAAC,SAAD,CACEC,OAAQC,cAAF,uQACFC,QAaKJ,iBAAKC,GCfdd,EAAYC,IAAOC,IAAI,CAC3BE,OAAQ,UAGJc,EAAM,WACV,MAAwBC,mBAAStB,GAAjC,mBAAOuB,EAAP,KAAaC,EAAb,KAEMC,EAAaC,uBAAY,SAACC,GAC9BH,GAAQ,SAACI,GAAD,mBAAC,eAAeA,GAASD,QAChC,IAQH,OANAE,qBAAU,WHXY,IAACC,IGYZL,EHXXM,OAAOC,iBAAiB,WAAW,YAAc,IAAXC,EAAU,EAAVA,IAChCC,OAAOX,KAAKvB,GAAiBmC,SAASF,IACxCH,EAAS,eAAGG,GAAM,OAItBF,OAAOC,iBAAiB,SAAS,YAAc,IAAXC,EAAU,EAAVA,IAC9BC,OAAOX,KAAKvB,GAAiBmC,SAASF,IACxCH,EAAS,eAAGG,GAAM,SGInB,CAACR,IAEJW,QAAQC,IAAId,GAGV,qCACE,cAAC,EAAD,IAEA,eAAC,EAAD,WACE,cAAC,EAAD,CAAWZ,OAAO,SAClB,cAAC,EAAD,CAAWA,OAAO,QAClB,cAAC,EAAD,CAAWA,OAAO,kBAMXK,iBAAKK,GC/BpBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5debf2aa.chunk.js","sourcesContent":["export type KeyboardEvent = { [key: string]: boolean };\r\n\r\ntype Callback = (keyboardEvent: KeyboardEvent) => void;\r\n\r\nexport const initialKeyboard = { ArrowLeft: false, ArrowRight: false };\r\n\r\nexport const keyboard = (callback: Callback) => {\r\n  window.addEventListener('keydown', ({ key }) => {\r\n    if (Object.keys(initialKeyboard).includes(key)) {\r\n      callback({ [key]: true });\r\n    }\r\n  });\r\n\r\n  window.addEventListener('keyup', ({ key }) => {\r\n    if (Object.keys(initialKeyboard).includes(key)) {\r\n      callback({ [key]: false });\r\n    }\r\n  });\r\n};\r\n","import { FC, memo } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { keyframes } from '@emotion/react';\r\n\r\nconst PUBLIC_URL = process.env.PUBLIC_URL;\r\n\r\nconst Container = styled.div({\r\n  width: 377,\r\n  height: 458,\r\n});\r\n\r\nconst Animation = keyframes`\r\n  from { background-position-x: 0 }\r\n  to { background-position-x: -3770px }\r\n`;\r\n\r\ninterface ISpriteImage {\r\n  motion: 'idle' | 'run' | 'attack';\r\n}\r\n\r\nconst SpriteImage = styled.div<ISpriteImage>(({ motion }) => ({\r\n  height: '100%',\r\n  backgroundImage: `url(${PUBLIC_URL}/image/character/${motion}.png)`,\r\n  animation: `${Animation} 0.5s infinite steps(10)`,\r\n}));\r\n\r\ninterface ICharacter {\r\n  motion: 'idle' | 'run' | 'attack';\r\n}\r\n\r\nconst Character: FC<ICharacter> = ({ motion }) => {\r\n  return (\r\n    <Container>\r\n      <SpriteImage motion={motion} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default memo(Character);\r\n","import { memo } from 'react';\r\nimport { Global, css } from '@emotion/react';\r\nimport emotionReset from 'emotion-reset';\r\n\r\nconst Reset = () => {\r\n  return (\r\n    <Global\r\n      styles={css`\r\n        ${emotionReset}\r\n\r\n        *, *::after, *::before {\r\n          box-sizing: border-box;\r\n          -moz-osx-font-smoothing: grayscale;\r\n          -webkit-font-smoothing: antialiased;\r\n          font-smoothing: antialiased;\r\n        }\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(Reset);\r\n","import styled from '@emotion/styled';\r\nimport { memo, useCallback, useEffect, useState } from 'react';\r\n\r\nimport { initialKeyboard, keyboard, KeyboardEvent } from './api/keyboard';\r\nimport { Character, Reset } from './components';\r\n\r\nconst Container = styled.div({\r\n  height: '100vh',\r\n});\r\n\r\nconst App = () => {\r\n  const [keys, setKeys] = useState(initialKeyboard);\r\n\r\n  const onKeyboard = useCallback((keyboardEvent: KeyboardEvent) => {\r\n    setKeys((prev) => ({ ...prev, ...keyboardEvent }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    keyboard(onKeyboard);\r\n  }, [onKeyboard]);\r\n\r\n  console.log(keys);\r\n\r\n  return (\r\n    <>\r\n      <Reset />\r\n\r\n      <Container>\r\n        <Character motion=\"idle\" />\r\n        <Character motion=\"run\" />\r\n        <Character motion=\"attack\" />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}